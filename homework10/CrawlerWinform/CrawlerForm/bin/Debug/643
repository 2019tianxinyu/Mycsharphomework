<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin" />
    <meta property="og:description" content="知识点回顾 依赖包。&amp;#160;Microsoft.Extensions.DependencyInjection.Abstractions 核心对象和方法。 IServiceCollection。注入" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>.NET CORE 依赖注入 实践总结 - xiaogui340 - 博客园</title>
    <link rel="shortcut icon" href="//common.cnblogs.com/favicon.ico?v=20200522" type="image/x-icon" />
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=KCO3_f2W_TC__-jZ7phSnmoFkQuWMJH2yAgA16eE3eY" />
    <link id="MainCss" rel="stylesheet" href="/skins/arrow/bundle-arrow.min.css?v=L-STHnRipM9Vp-O5CxV_IvvLLLSaib7U0fJDhFfRZZ8" />
    
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/arrow/bundle-arrow-mobile.min.css?v=g8joWIb9zf0v6qSSYjzuwnPNxYNYutz3bgwMjs-jMEg" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/gt1987/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/gt1987/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/gt1987/wlwmanifest.xml" />
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=6bwfCY2e02dLOXNW99G2BHZkYFmw9QyYTWeJ-W-sudo"></script>
    <script>
        var currentBlogId = 510284;
        var currentBlogApp = 'gt1987';
        var cb_enable_mathjax = false;
        var isLogined = false;
        var skinName = 'arrow';
    </script>
    
    
    
</head>
<body>
    <a name="top"></a>
    
    <!--done-->
<div id="header">
	
<!--done-->
<div class="header">
	<div class="headerText">
		<a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/gt1987/">xiaogui340</a>
<br>
		


	</div>
</div>


</div>
<div id="mylinks">
<!--done-->
<a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
&nbsp;&nbsp;&nbsp;

<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/gt1987/">
首页</a>
&nbsp;&nbsp;&nbsp;


<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
&nbsp;&nbsp;&nbsp;

<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/xiaogui340">
联系</a>&nbsp;&nbsp;&nbsp;

<a id="blog_nav_rss" class="menu" href="javascript:void(0)" data-rss="https://www.cnblogs.com/gt1987/rss/">
订阅</a>
<a id="blog_nav_rss_image" href="https://www.cnblogs.com/gt1987/rss/">
    <img src="/skins/arrow/images/xml.gif" alt="订阅" />
</a>&nbsp;&nbsp;&nbsp;

<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>


</div>
<div id="mytopmenu">
	
		<div class="blogStats">随笔 - 
16&nbsp;
文章 - 
0&nbsp;评论 - 
1&nbsp;trackbacks - 
0
</div>


	
</div>
<div id="leftcontent">
	
		<DIV id="leftcontentcontainer">
			<div id="blog-calendar" style="display:none"></div><script>loadBlogDefaultCalendar();</script><br>
			
<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>

<div id="sidebar_ad"></div>
			<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script></DIV>		
	
</div>
<div id="centercontent">
	<!--done-->
<div id="post_detail">
    <div class="post">
        <div class="postTitle">
            <h1>
<a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/gt1987/p/12973001.html">.NET CORE 依赖注入 实践总结</a>
</h1>
        </div>
        
<div id="cnblogs_post_body" class="blogpost-body ">
    <h2>知识点回顾</h2>
<ul>
<li>依赖包。&nbsp;<strong>Microsoft.Extensions.DependencyInjection.Abstractions</strong></li>
<li>核心对象和方法。
<ul>
<li><strong>IServiceCollection</strong>。注入对象的容器。注意它只存储对象的元数据，并不保存实例对象。</li>
<li><strong>IServiceProvider</strong>。注入对象的提供者。它负责提供具体的对象实例。在架构中，IServiceProvider有2种身份，一种是Root ServiceProvider，由service.BuildServiceProvider()创建，生命周期贯穿整个应用程序，AddSingleton对象保存在这里。另外一种则是普通IServiceProvider，由IServiceScope创建，生命周期即为AddScoped的生命周期。AddScope 的对象保存在这里。普通ServiceProvider由Root&nbsp;ServiceProvider创建的IServiceScope创建。</li>
<li><strong>IServiceScope</strong>。表某一个生命周期范围。由ServiceProvider.CreateScope()创建。</li>
<li><strong>注入方式，知识点一</strong>。
<ul>
<li>注入功能默认在Startup类中的ConfigureServices方法中。</li>
</ul>
</li>
<li><strong>注入方式，知识点二</strong>。支持以下三种方式
<ul>
<li>AddScoped。生命周期为Scoped类型。例如在web框架中，即表示一次Request请求范围内。</li>
<li>AddSingleton。单例，应用程序全局使用同一个实例。</li>
<li>AddTransient。即时的，即对象每次使用都会重新实例化。　　</li>
</ul>
</li>
<li><strong>注入方式，知识点三</strong>。提供多种注入技巧，以Transient为例
<ul>
<li>实例注入。AddTransient&lt;TService&gt;(this IServiceCollection services)。</li>
<li>泛型注入。AddTransient&lt;TService, TImplementation&gt;(this IServiceCollection services)。</li>
<li>工厂注入。AddTransient&lt;TService&gt;(this IServiceCollection services, Func&lt;IServiceProvider, TService&gt; implementationFactory)。</li>
<li>TryAddXXX。仅当XXX尚未注册实现时，注册该服务。此方法用来避免在容器中注册一个实例的两个副本。</li>
</ul>
</li>
<li>获取实例的方法 <strong>GetService</strong>和<strong>GetRequiredService</strong>的区别，前置如果service不存在会返回NULL，后者会直接抛出异常。根据需要选择GetRequiredService，可能会让你的代码变得简洁一点。</li>
</ul>
</li>
</ul>
<h2>WHY 依赖注入</h2>
<p>这里只谈益处。</p>
<ul>
<li>使用接口或基类抽象化依赖关系实现，明确各个类之间的依赖关系。</li>
<li>生命周期的统一管理，尤其对于某些类被多处依赖，关系会变得分散难以管理，依赖注入容器可以解决这点。</li>
<li>非常利于单元测试。</li>
</ul>
<h2>最佳实践</h2>
<p>部分来自官方文档的一些建议</p>
<ul>
<li>对于需要注入为单例的实例，不要依赖Scoped实例。会触发 .NET CORE作用域验证失败。</li>
<li>不要从Root IServiceProvider解析有作用域的实例，这样会导致该作用域的实例变成单一实例。同样会触发作用域验证失败。</li>
<li>对于Asp.Net Core，尽量通过构造函数而不是HttpContext.RequestServices获取实例，这样更易于单元测试。</li>
<li>需要对某个组件服务或是一些服务集合（包括其依赖注入时），使用约定的 Add{SERVICE_NAME} 扩展方法来注册该服务所需的所有服务。</li>
<li>若必须要从IServiceProvider中解析实例（如在单元测试中），请通过using (var scope = ServiceProvider.CreateScope()){ }方式创建作用域来获取实例。</li>
<li>代码中避免设计有状态的、静态类和成员。可以考虑设计注入为单一实例。</li>
<li>代码中避免在服务中直接实例化以来类。尽量采用依赖注入的方式</li>
<li>注意以下两种方式注入的区别，后者的实例化不是服务容器创建的，所有容器不会处理实例的Dispose !!
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> Service1 : IDisposable {}
</span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> Service2 : IDisposable {}

</span><span style="color: #008000;">//</span><span style="color: #008000;">方式一</span>
<span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> ConfigureServices(IServiceCollection services)
{
    services.AddSingleton</span>&lt;Service1&gt;<span style="color: #000000;">();
    services.AddSingleton</span>&lt;IService2&gt;(sp =&gt; <span style="color: #0000ff;">new</span><span style="color: #000000;"> Service2());
}

</span><span style="color: #008000;">//</span><span style="color: #008000;">方式二</span>
<span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> ConfigureServices(IServiceCollection services)
{
    services.AddSingleton</span>&lt;Service1&gt;(<span style="color: #0000ff;">new</span><span style="color: #000000;"> Service1());
    services.AddSingleton(</span><span style="color: #0000ff;">new</span><span style="color: #000000;"> Service2());
}</span></pre>
</div>
</li>
<li>延伸上一点，对于复杂对象的创建，尽量采用提供的工厂注入方式。注意工厂注入的参数是IServiceProvider，可以通过它获取你需要的实例对象。</li>
<li>继续延伸上一点，不要在ConfigureServices方法中 通过collection.BuildServiceProvider()来获取IServiceProvider。这个创建的是一个Root&nbsp;IServiceProvider。单例会实例化一次，然后ConfigureServices方法结束后框架会再次调用collection.BuildServiceProvider()，单例又会重新实例化一次。</li>
<li>不支持基于async/await和Task的服务解析。C# 不支持异步构造函数；因此建议模式是在同步解析服务后使用异步方法</li>
<li>避免在容器中直接存储数据和配置。配置应使用NET CORE的选项模型。</li>
<li>避免使用服务定位器模式。例如直接注入IServiceProvider来获取多个需要的服务。PS，如果你的服务依赖项过多，应该考虑分割成几个小功能服务了。</li>
</ul>
<h2>引入第三方IOC框架</h2>
<p>.NET CORE 3.x版本后，引入第三方IOC框架的方式变更了，这里不再贴出2.x的方式。以Autofac框架为例。</p>
<p>Program.cs</p>
<div class="cnblogs_code">
<pre>        <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> IHostBuilder CreateHostBuilder(<span style="color: #0000ff;">string</span>[] args) =&gt;<span style="color: #000000;">
            Host.CreateDefaultBuilder(args)
                <span style="color: #ff0000;">.UseServiceProviderFactory(</span></span><span style="color: #ff0000;">new</span><span style="color: #000000;"><span style="color: #ff0000;"> AutofacServiceProviderFactory())</span>
                .ConfigureWebHostDefaults(webBuilder </span>=&gt;<span style="color: #000000;">
                {
                    webBuilder.UseStartup</span>&lt;Startup&gt;<span style="color: #000000;">()
                            .ConfigureLogging((hostingContext, logging) </span>=&gt;<span style="color: #000000;">
                            {
                                logging.ClearProviders();
                                logging.AddConsole();
                                logging.AddNLog();
                            });
                });</span></pre>
</div>
<p>Startup.cs</p>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">　　　　 <br />　　　　 //原来的 </span>ConfigureServices保留，也可以使用原来的框架继续注入</pre>
<pre><span style="color: #0000ff;">        public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> ConfigureServices(IServiceCollection services)
        {
            services.AddControllers();
</span><span style="color: #000000;">            services.AddMemoryCache();
            services.Configure</span>&lt;List&lt;<span style="color: #0000ff;">string</span>&gt;&gt;(Configuration.GetSection(<span style="color: #800000;">"</span><span style="color: #800000;">BlackPhoneList</span><span style="color: #800000;">"</span><span style="color: #000000;">));
            services.Configure</span>&lt;Dictionary&lt;<span style="color: #0000ff;">string</span>, <span style="color: #0000ff;">string</span>&gt;&gt;(Configuration.GetSection(<span style="color: #800000;">"</span><span style="color: #800000;">BusinessMessages</span><span style="color: #800000;">"</span><span style="color: #000000;">));
        }
        //增加ConfigureContainer(ContainerBuilder builder) 方式，使用Autofac框架注入
        </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> ConfigureContainer(ContainerBuilder builder)
        {
</span><span style="color: #000000;">            builder.RegisterType</span>&lt;PhoneBlackListValidator&gt;().Named&lt;IPhoneValidator&gt;(<span style="color: #800000;">"</span><span style="color: #800000;">PHONE_BLACKLIST</span><span style="color: #800000;">"</span><span style="color: #000000;">).SingleInstance();
            builder.RegisterType</span>&lt;PhonePerDayCountValidator&gt;().Named&lt;IPhoneValidator&gt;(<span style="color: #800000;">"</span><span style="color: #800000;">PHONE_PERDAYCOUNT</span><span style="color: #800000;">"</span><span style="color: #000000;">).SingleInstance();
            builder.RegisterType</span>&lt;UniqueIdPerDayCountValidator&gt;().Named&lt;IUniqueIdValidator&gt;(<span style="color: #800000;">"</span><span style="color: #800000;">UNIQUEID_PERDAYCOUNT</span><span style="color: #800000;">"</span><span style="color: #000000;">).SingleInstance();

            </span><span style="color: #008000;">//</span><span style="color: #008000;">可遍历类型注入，注意 只支持IEnumerable\IList\ICollection 类型</span>
            builder.RegisterType&lt;MessageSendValidator&gt;().As&lt;IMessageSendValidator&gt;<span style="color: #000000;">().SingleInstance();</span>
        }</pre>
</div>
<p>3.x 主要是在IServiceCollection和IServiceProvider之间增加了一个&nbsp;ContainerBuilder 容器适配，使得第三方IOC框架引入更加合理了。具体实现原理可以网上源码查找。</p>
<h2>特别关注-线程安全</h2>
<ul>
<li><span data-ttu-id="0a8f1-360">创建线程安全的单一实例服务。&nbsp;<span data-ttu-id="0a8f1-361">如果单例服务依赖于一个Transient服务，那么Transient服务可能也需要线程安全，具体取决于单例使用它的方式。</span></span></li>
<li><span data-ttu-id="0a8f1-360"><span data-ttu-id="0a8f1-361">工厂注入方式的Func&lt;IServiceProvider,TService&gt;不需要是线程安全的，框架保证它由单个线程调用一次。</span></span></li>
</ul>
</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
        <div class="postDesc">posted on 
<span id="post-date">2020-05-27 18:03</span>&nbsp;
<a href="https://www.cnblogs.com/gt1987/">xiaogui340</a>&nbsp;
阅读(<span id="post_view_count">...</span>)&nbsp;
评论(<span id="post_comment_count">...</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12973001" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(12973001);return false;">收藏</a></div>
    </div>
</div>

<script src="https://common.cnblogs.com/highlight/9.12.0/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 510284, cb_blogApp = 'gt1987', cb_blogUserGuid = 'bc530092-c931-e111-b988-842b2b196315';
    var cb_entryId = 12973001, cb_entryCreatedDate = '2020-05-27 18:03', cb_postType = 1; 
    loadViewCount(cb_entryId);
    loadSideColumnAd();
</script><a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<script>
    var commentManager = new blogCommentManager();
    commentManager.renderComments(0);
</script>

<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <script async="async" src="https://www.googletagservices.com/tag/js/gpt.js"></script>
    <script>
        var googletag = googletag || {};
        googletag.cmd = googletag.cmd || [];
    </script>
    <script>
        googletag.cmd.push(function () {
            googletag.defineSlot("/1090369/C1", [300, 250], "div-gpt-ad-1546353474406-0").addService(googletag.pubads());
            googletag.defineSlot("/1090369/C2", [468, 60], "div-gpt-ad-1539008685004-0").addService(googletag.pubads());
            googletag.pubads().enableSingleRequest();
            googletag.enableServices();
        });
    </script>
    <div id="cnblogs_c1" class="c_ad_block">
        <div id="div-gpt-ad-1546353474406-0" style="height:250px; width:300px;"></div>
    </div>
    <div id="under_post_news"></div>
    <div id="cnblogs_c2" class="c_ad_block">
        <div id="div-gpt-ad-1539008685004-0" style="height:60px; width:468px;"></div>
    </div>
    <div id="under_post_kb"></div>
    <div id="HistoryToday" class="c_ad_block"></div>
    <script type="text/javascript">
        fixPostBody();
        deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);        deliverAdT2();
        deliverAdC1();
        deliverAdC2();
        loadNewsAndKb();
        loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);        LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
        GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
        loadOptUnderPost();
        GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div>

	<!--done-->
<div class="footer">
	Copyright &copy; 2020 xiaogui340
<br /><span id="poweredby">Powered by .NET Core on Kubernetes</span>
 Powered by: <a href="http://www.cnblogs.com" class="footerlink">博客园</a><br>
</div>


</div>




    
</body>
</html>