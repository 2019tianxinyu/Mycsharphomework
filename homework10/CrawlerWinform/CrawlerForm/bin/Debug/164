<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="never" />
    <meta property="og:description" content="我们知道，如果给 form 里面的 button 元素绑定事件，需要考虑它是否会触发 form 的 submit 行为。除此之外，其它场合给 button 元素绑定事件，你几乎不用担心这个事件会有什么" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>要小心 JavaScript 的事件代理 - 前端小蜜蜂 - 博客园</title>
    <link rel="shortcut icon" href="//common.cnblogs.com/favicon.ico?v=20200522" type="image/x-icon" />
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=KCO3_f2W_TC__-jZ7phSnmoFkQuWMJH2yAgA16eE3eY" />
    
    <link type="text/css" rel="stylesheet" href="https://www.cnblogs.com/fehoney/custom.css?v=ygCkGwtONlqPDQy9PteDZWxQb/s=" />
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/custom/bundle-custom-mobile.min.css?v=-Yh290MhQyDeXLmvKTSses9H6-49lqbpXFh55zvS0w8" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/fehoney/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/fehoney/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/fehoney/wlwmanifest.xml" />
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=6bwfCY2e02dLOXNW99G2BHZkYFmw9QyYTWeJ-W-sudo"></script>
    <script>
        var currentBlogId = 605701;
        var currentBlogApp = 'fehoney';
        var cb_enable_mathjax = false;
        var isLogined = false;
        var skinName = 'Custom';
    </script>
    
    
    
</head>
<body>
    <a name="top"></a>
    
    
<!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
        <a id="lnkBlogLogo" href="https://www.cnblogs.com/fehoney/"><img id="blogLogo" src="/skins/custom/images/logo.gif" alt="返回主页" /></a>		
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/fehoney/">前端小蜜蜂</a>
</h1>
<h2>
勤劳的前端小蜜蜂，请多指教 ^_^
</h2>




		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
<li>
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/fehoney/">
首页</a>
</li>
<li>

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
<li>
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/%E5%89%8D%E7%AB%AF%E5%B0%8F%E8%9C%9C%E8%9C%82">
联系</a></li>
<li>
<a id="blog_nav_rss" class="menu" href="javascript:void(0)" data-rss="https://www.cnblogs.com/fehoney/rss/">
订阅</a>
<!--<partial name="./Shared/_XmlLink.cshtml" model="Model" /></li>--></li>
<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>


		<div class="blogStats">
			
			<span id="stats_post_count">随笔 - 
5&nbsp; </span>
<span id="stats_article_count">文章 - 
0&nbsp; </span>
<span id="stats-comment_count">评论 - 
30</span>

			
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->

<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		<div id="post_detail">
    <!--done-->
    <div id="topics">
        <div class="post">
            <h1 class = "postTitle">
                
<a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/fehoney/p/12962280.html">要小心 JavaScript 的事件代理</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
    <p>我们知道，如果给 form 里面的 button 元素绑定事件，需要考虑它是否会触发 form 的 submit 行为。除此之外，其它场合给 button 元素绑定事件，你几乎不用担心这个事件会有什么非预期的附加效果，很自然地会这样写事件处理代码：</p>
<pre><code class="language-js">var button = document.querySelector('button')
button.addEventListener('click', function (e) {
  console.log('点击了按钮')
})
</code></pre>
<p>你之所以放心这么写，是因为这个 button 元素没有使用事件代理，即没有代理任何子元素的事件。</p>
<p>事件代理的意思是，你要为一个元素绑定事件，但你不是直接把事件绑定到这个元素自己身上，而是绑定到这个元素的父元素上。当子元素的某个事件（比如点击事件）触发时，它的父元素相同的事件也会触发（我们常说的事件冒泡），此时我们说父元素代理了子元素的事件。</p>
<p>举个例子，比如一个 button 元素中包含一个齿轮图标：</p>
<pre><code class="language-html">&lt;button&gt;
  &lt;svg&gt;
    &lt;use xlink:href=&quot;#gear&quot;&gt;&lt;/use&gt;
  &lt;/svg&gt;
&lt;/button&gt;
</code></pre>
<p>当用户点击齿轮图标，必然要触发 click 事件，但你并不会直接绑定事件到 svg 或 use 元素上，而是绑定到它们的父元素 button 上。即：</p>
<pre><code class="language-js">document.querySelector('button').addEventListener('click', function (e) {
  console.log('点击了按钮')
})
</code></pre>
<p>这种情况，我们可以说，button 元素代理了它的所有子元素的 click 事件。</p>
<p>但是，出现这种事件代理的情况时，我们就得小心了。</p>
<p>为了更直观地说明问题，我们把“父”元素上升到顶层的 document 元素：</p>
<pre><code class="language-js">document.documentElement.addEventListener('click', function (e) {
  console.log('我被点击了')
})
</code></pre>
<p>只要网页中任意一个位置被点击了，都会触发绑定在 document 元素上的点击事件。​ 想要知道事件具体是发生在哪个元素上面，可以通过事件对象提供的 target 属性来判断。</p>
<pre><code class="language-js">document.documentElement.addEventListener('click', function (e) {
  console.log(e.target)
})
</code></pre>
<p>我们很容易知道事件具体是发生在哪个元素身上的。于是在上面的示例中，如果父元素 document 想在按钮被点击时做点什么事情，我们很自然地会这么写：</p>
<pre><code class="language-js">document.documentElement.addEventListener('click', function (e) {
  if (e.target.tagName === 'BUTTON') {
    console.log('按钮被点击了')
  }
})
</code></pre>
<p>这时问题就出现了，按钮即使被点击了 if 条件也不一定成立，即也不一定会输出“按钮被点击了”。因为用户在按钮上的某个位置点击了，根据用户点击的位置，e.target 可能是下面三种情况：</p>
<ul>
<li>BUTTON 元素</li>
<li>SVG 元素</li>
<li>USE 元素</li>
</ul>
<p>实际的情况是这样的：</p>
<p><img src="http://qa457e20e.bkt.clouddn.com/202005/25213022" alt=" "></p>
<p>我们真正的意图是，只要点击是发生在按钮上面，不论是按钮的哪个位置，我们都应视为按钮被点击了。 嗯，简单，我们再改一下，这样写：</p>
<pre><code class="language-js">document.documentElement.addEventListener('click', function (e) {
  if (['BUTTON', 'SVG', 'USE'].includes(e.target.tagName.toUpperCase())) {
    // 点击的是按钮
  }
})
</code></pre>
<p>这样似乎没什么问题，也确实可以达到目的，但看上去总是有些别扭。因为这种情况对于最上层的 document 来说，得知道每个子元素的情况，本来我只需要关心离我最近的 button 元素就可以了。</p>
<p>根据 OOP 对内封装的思想，button 元素内部的事情应该在内部消化掉，其子元素对外不可见，应该只暴露 button 元素本身。依据这个思想和事件冒泡的特点，我们就有了比较好的解决办法：只需要禁止 button 内部元素的事件响应（包括事件冒泡）而只允许 button 元素本身的事件发生就行。有两种方式可以实现这个目的。</p>
<p>一种是使用 CSS 禁止 button 内部元素的事件响应：</p>
<pre><code class="language-css">button &gt; * {
  pointer-events: none;
}
</code></pre>
<p>另一种是使用 JS 来阻止 button 内部元素的事件响应（包括事件冒泡）：</p>
<pre><code class="language-js">document.querySelector('button &gt; svg').addEventListener('click', function (e) {
  e.stopPropagation()
  e.preventDefault()
})

document.querySelector('button').addEventListener('click', function (e) {
  console.log(e.target.tagName)
})
</code></pre>
<p>这两种方式都能达到我们预期的效果：</p>
<p><img src="http://qa457e20e.bkt.clouddn.com/202005/25225251" alt=" "></p>
<p>综上，针对特定元素进行事件处理时，如果该元素有事件代理的情况，就要小心处理它所代理的子元素。</p>

</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
            </div>
            <div class="postDesc">posted @ 
<span id="post-date">2020-05-27 17:10</span>&nbsp;
<a href="https://www.cnblogs.com/fehoney/">前端小蜜蜂</a>&nbsp;
阅读(<span id="post_view_count">...</span>)&nbsp;
评论(<span id="post_comment_count">...</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12962280" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(12962280);return false;">收藏</a></div>
        </div>
	    
	    
    </div><!--end: topics 文章、评论容器-->
</div>
<script src="https://common.cnblogs.com/highlight/9.12.0/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 605701, cb_blogApp = 'fehoney', cb_blogUserGuid = 'e9c1386a-387d-4066-5edb-08d7f668918e';
    var cb_entryId = 12962280, cb_entryCreatedDate = '2020-05-27 17:10', cb_postType = 1; 
    loadViewCount(cb_entryId);
    loadSideColumnAd();
</script><a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<script>
    var commentManager = new blogCommentManager();
    commentManager.renderComments(0);
</script>

<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <script async="async" src="https://www.googletagservices.com/tag/js/gpt.js"></script>
    <script>
        var googletag = googletag || {};
        googletag.cmd = googletag.cmd || [];
    </script>
    <script>
        googletag.cmd.push(function () {
            googletag.defineSlot("/1090369/C1", [300, 250], "div-gpt-ad-1546353474406-0").addService(googletag.pubads());
            googletag.defineSlot("/1090369/C2", [468, 60], "div-gpt-ad-1539008685004-0").addService(googletag.pubads());
            googletag.pubads().enableSingleRequest();
            googletag.enableServices();
        });
    </script>
    <div id="cnblogs_c1" class="c_ad_block">
        <div id="div-gpt-ad-1546353474406-0" style="height:250px; width:300px;"></div>
    </div>
    <div id="under_post_news"></div>
    <div id="cnblogs_c2" class="c_ad_block">
        <div id="div-gpt-ad-1539008685004-0" style="height:60px; width:468px;"></div>
    </div>
    <div id="under_post_kb"></div>
    <div id="HistoryToday" class="c_ad_block"></div>
    <script type="text/javascript">
        fixPostBody();
        deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);        deliverAdT2();
        deliverAdC1();
        deliverAdC2();
        loadNewsAndKb();
        loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);        LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
        GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
        loadOptUnderPost();
        GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div>
	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			
<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>

<div id="sidebar_ad"></div>
			<div id="blog-calendar" style="display:none"></div><script>loadBlogDefaultCalendar();</script>
			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
			</div>
			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		<!--done-->
Copyright &copy; 2020 前端小蜜蜂
<br /><span id="poweredby">Powered by .NET Core on Kubernetes</span>



	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


    
</body>
</html>