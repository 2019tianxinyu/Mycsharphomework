<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin" />
    
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>惊却一目 - 博客园</title>
    <link rel="shortcut icon" href="//common.cnblogs.com/favicon.ico?v=20200522" type="image/x-icon" />
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=KCO3_f2W_TC__-jZ7phSnmoFkQuWMJH2yAgA16eE3eY" />
    <link id="MainCss" rel="stylesheet" href="/skins/coffee/bundle-coffee.min.css?v=KPz7rj-c2sTAV1_ck1aDmbZcuCG3KBhyLnfvzf6nn94" />
    
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/coffee/bundle-coffee-mobile.min.css?v=na9bpAY4yh7uEWCcrXj3vfJM3VBse8YtU6-5fUUQPz0" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/jingqueyimu/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/jingqueyimu/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/jingqueyimu/wlwmanifest.xml" />
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=6bwfCY2e02dLOXNW99G2BHZkYFmw9QyYTWeJ-W-sudo"></script>
    <script>
        var currentBlogId = 565815;
        var currentBlogApp = 'jingqueyimu';
        var cb_enable_mathjax = false;
        var isLogined = false;
        var skinName = 'coffee';
    </script>
    
    
    
</head>
<body>
    <a name="top"></a>
    
    
<!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
	<a href="https://www.cnblogs.com/jingqueyimu/"><img id="blogLogo" src="/skins/custom/images/logo.gif" alt="返回主页" /></a>			
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/jingqueyimu/">惊却一目</a>
</h1>
<h2>
个人博客：www.jingqueyimu.com
</h2>




		
	</div><!--end: blogTitle 博客的标题和副标题 -->
</div><!--end: header 头部 -->

<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		<div id="navigator">
			
<ul id="navList">
	<li><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
	<li>
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/jingqueyimu/">
首页</a>
</li>
	<li>

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
	<li>
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/%E6%83%8A%E5%8D%B4%E4%B8%80%E7%9B%AE">
联系</a></li>
	<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
	<li>
<a id="blog_nav_rss" class="menu" href="javascript:void(0)" data-rss="https://www.cnblogs.com/jingqueyimu/rss/">
订阅</a>
	
<a id="blog_nav_rss_image" href="https://www.cnblogs.com/jingqueyimu/rss/">
    <img src="/skins/coffee/images/xml.gif" alt="订阅" />
</a></li>
</ul>



			<div class="blogStats">
				
				<!--done-->
随笔- 
12&nbsp;
文章- 
0&nbsp;
评论- 
0&nbsp;



				
			</div><!--end: blogStats -->
		</div><!--end: navigator 博客导航栏 -->
		
<!--done-->




		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/jingqueyimu/archive/2020/05/27.html">2020年5月27日</a>
    </div>


        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/jingqueyimu/p/12976506.html">
    《Head First 设计模式》：策略模式
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：正文 一、定义 策略模式定义了算法族，分别封装起来，让它们之间可以相互替换，此模式让算法的变化独立于使用算法的客户。 要点： 策略模式把系统中会变化的部分抽出来封装。 二、实现步骤 1、创建策略接口 /** * 策略接口 */ public interface Strategy { /** * 执行            <a href="https://www.cnblogs.com/jingqueyimu/p/12976506.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2020-05-27 20:50
惊却一目
<span class="post-view-count">阅读(61)</span><text> </text>
<span class="post-comment-count">评论(0)</span><text> </text>
<span class="post-digg-count">推荐(0)</span><text> </text>
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12976506" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>

</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/jingqueyimu/archive/2020/04/16.html">2020年4月16日</a>
    </div>


        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/jingqueyimu/p/12716260.html">
    《深入理解 Java 虚拟机》笔记整理
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：正文 一、Java 内存区域与内存溢出异常 1、运行时数据区域 程序计数器 ：当前线程所执行的字节码的行号指示器。线程私有。 Java 虚拟机栈 ：Java 方法执行的内存模型。线程私有。 本地方法栈 ：Native 方法执行的内存模型。线程私有。 Java 堆 ：存放对象实例。分为新生代（Eden            <a href="https://www.cnblogs.com/jingqueyimu/p/12716260.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2020-04-16 22:16
惊却一目
<span class="post-view-count">阅读(351)</span><text> </text>
<span class="post-comment-count">评论(0)</span><text> </text>
<span class="post-digg-count">推荐(3)</span><text> </text>
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12716260" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>

</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/jingqueyimu/archive/2020/04/07.html">2020年4月7日</a>
    </div>


        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/jingqueyimu/p/12657028.html">
    《深入理解 Java 虚拟机》读书笔记：线程安全与锁优化
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：正文 一、线程安全 当多个线程访问一个对象时，如果不用考虑这些线程在运行时环境下的调度和交替执行，也不需要进行额外的同步，或者在调用方进行任何其他的协调操作，调用这个对象的行为都可以获得正确的结果，那这个对象是线程安全的。 1、Java 语言中的线程安全 按线程安全的“安全程度”由强至弱排序，可以将            <a href="https://www.cnblogs.com/jingqueyimu/p/12657028.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2020-04-07 23:19
惊却一目
<span class="post-view-count">阅读(49)</span><text> </text>
<span class="post-comment-count">评论(0)</span><text> </text>
<span class="post-digg-count">推荐(0)</span><text> </text>
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12657028" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>

</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/jingqueyimu/archive/2020/04/01.html">2020年4月1日</a>
    </div>


        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/jingqueyimu/p/12616771.html">
    《深入理解 Java 虚拟机》读书笔记：Java 内存模型与线程
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：正文 由于计算机的处理器运算速度与它的存储和通信子系统速度的差距太大了，大量的时间都花费在磁盘 I/O、网络通信或者数据库访问上，导致处理器在大部分时间里都处于等待其他资源的状态。因此，为了充分利用计算机的处理器运算能力，现代计算机操作系统采用了多任务处理的方式，即让计算机并发处理多个任务。 对于计            <a href="https://www.cnblogs.com/jingqueyimu/p/12616771.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2020-04-01 23:21
惊却一目
<span class="post-view-count">阅读(66)</span><text> </text>
<span class="post-comment-count">评论(0)</span><text> </text>
<span class="post-digg-count">推荐(1)</span><text> </text>
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12616771" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>

</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/jingqueyimu/archive/2020/03/29.html">2020年3月29日</a>
    </div>


        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/jingqueyimu/p/12595361.html">
    《深入理解 Java 虚拟机》读书笔记：晚期（运行期）优化
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：正文 在部分商用虚拟机（Sun HotSpot、IBM J9）中，Java 程序最初是通过解释器进行解释执行的，当虚拟机发现某个方法或代码块的运行特别频繁时，就会把这些代码认定为“热点代码”。为了提高热点代码的执行效率，在运行时，虚拟机会把这些代码编译成本地机器码，并进行各种层次的优化。完成这个任务            <a href="https://www.cnblogs.com/jingqueyimu/p/12595361.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2020-03-29 22:10
惊却一目
<span class="post-view-count">阅读(23)</span><text> </text>
<span class="post-comment-count">评论(0)</span><text> </text>
<span class="post-digg-count">推荐(0)</span><text> </text>
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12595361" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>

</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/jingqueyimu/archive/2020/03/22.html">2020年3月22日</a>
    </div>


        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/jingqueyimu/p/12548174.html">
    《深入理解 Java 虚拟机》读书笔记：早期（编译期）优化
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：正文 Java 语言的 3 类编译器： 前端编译器：把 java 文件 转变成 class 文件。例如：Sun 的 Javac。 JIT 编译器（即时编译器）：后端运行期编译器，把字节码转变成机器码。例如：HotSpot VM 的 C1、C2 编译器。 AOT 编译器（静态提前编译器）：直接把 ja            <a href="https://www.cnblogs.com/jingqueyimu/p/12548174.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2020-03-22 20:42
惊却一目
<span class="post-view-count">阅读(25)</span><text> </text>
<span class="post-comment-count">评论(0)</span><text> </text>
<span class="post-digg-count">推荐(0)</span><text> </text>
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12548174" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>

</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/jingqueyimu/archive/2020/03/15.html">2020年3月15日</a>
    </div>


        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/jingqueyimu/p/12501109.html">
    《深入理解 Java 虚拟机》读书笔记：虚拟机字节码执行引擎
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：正文 执行引擎是 Java 虚拟机最核心的组成部分之一。在不同的虚拟机实现里，执行引擎在执行 Java 代码时可能会有解释执行（通过解释器执行）和编译执行（通过即时编译器产生本地代码执行）两种选择，也可能两者兼备。但从外观上看，所有 Java 虚拟机的执行引擎都是一致的：输入的是字节码文件，处理过程            <a href="https://www.cnblogs.com/jingqueyimu/p/12501109.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2020-03-15 23:26
惊却一目
<span class="post-view-count">阅读(44)</span><text> </text>
<span class="post-comment-count">评论(0)</span><text> </text>
<span class="post-digg-count">推荐(0)</span><text> </text>
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12501109" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>

</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/jingqueyimu/archive/2020/03/09.html">2020年3月9日</a>
    </div>


        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/jingqueyimu/p/12451919.html">
    《深入理解 Java 虚拟机》读书笔记：虚拟机类加载机制
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：正文 虚拟机把描述类的数据从 Class 文件加载到内存，并对数据进行校验、转换解析和初始化，最终形成可以被虚拟机直接使用的 Java 类型，这就是虚拟机的类加载机制。 一、类加载的时机 1、类的生命周期 加载 连接（验证、准备、解析） 初始化 使用 卸载 加载、验证、准备、初始化和卸载这 5 个阶            <a href="https://www.cnblogs.com/jingqueyimu/p/12451919.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2020-03-09 22:02
惊却一目
<span class="post-view-count">阅读(143)</span><text> </text>
<span class="post-comment-count">评论(0)</span><text> </text>
<span class="post-digg-count">推荐(0)</span><text> </text>
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12451919" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>

</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/jingqueyimu/archive/2020/02/28.html">2020年2月28日</a>
    </div>


        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/jingqueyimu/p/12381178.html">
    《深入理解 Java 虚拟机》读书笔记：类文件结构
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：正文 一、无关性的基石 1、两种无关性 平台无关性： Java 程序的运行不受计算机平台的限制，“一次编写，到处运行”。 语言无关性： Java 虚拟机只与 Class 文件关联，并不关心 Class 文件的来源是何种语言。 2、无关性的实现基础 各种不同平台的 虚拟机 所有平台都统一使用的 字节码            <a href="https://www.cnblogs.com/jingqueyimu/p/12381178.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2020-02-28 23:55
惊却一目
<span class="post-view-count">阅读(52)</span><text> </text>
<span class="post-comment-count">评论(0)</span><text> </text>
<span class="post-digg-count">推荐(0)</span><text> </text>
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12381178" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>

</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/jingqueyimu/archive/2020/01/14.html">2020年1月14日</a>
    </div>


        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/jingqueyimu/p/12194542.html">
    《深入理解 Java 虚拟机》读书笔记：虚拟机性能监控与故障处理工具
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：正文 一、JDK 的命令行工具 JDK 的 bin 目录下提供了一些用于监视虚拟机和故障处理的命令行工具。 | 名称 | 主要作用 | | | | | jps | JVM Process Status Tool，显示正在运行的虚拟机进程 | | jstat | JVM Statistics Moni            <a href="https://www.cnblogs.com/jingqueyimu/p/12194542.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2020-01-14 23:04
惊却一目
<span class="post-view-count">阅读(187)</span><text> </text>
<span class="post-comment-count">评论(0)</span><text> </text>
<span class="post-digg-count">推荐(1)</span><text> </text>
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12194542" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>

</div>



<div class="topicListFooter">
    <div id="nav_next_page">
        
    <a href="https://www.cnblogs.com/jingqueyimu/default.html?page=2">
        下一页
    </a>

    </div>    
</div>








	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			
<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>

<div id="sidebar_ad"></div>
			<div id="calendar"><div id="blog-calendar" style="display:none"></div><script>loadBlogDefaultCalendar();</script></div>
			
			<DIV id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
			</DIV>
			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		<!--done-->
Copyright &copy; 2020 惊却一目
<br /><span id="poweredby">Powered by .NET Core on Kubernetes</span>



	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


    
</body>
</html>