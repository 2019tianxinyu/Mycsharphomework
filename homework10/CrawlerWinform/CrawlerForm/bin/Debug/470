<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin" />
    
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>shanzm - 博客园</title>
    <link rel="shortcut icon" href="//common.cnblogs.com/favicon.ico?v=20200522" type="image/x-icon" />
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=KCO3_f2W_TC__-jZ7phSnmoFkQuWMJH2yAgA16eE3eY" />
    <link id="MainCss" rel="stylesheet" href="/skins/elf/bundle-elf.min.css?v=mpcef9xxdj1doWi6glkD6lMbmGclGCSPM_FSrhFRY-A" />
    <link type="text/css" rel="stylesheet" href="https://www.cnblogs.com/shanzhiming/custom.css?v=NfyGKQEPE65DP5h/mDc/AGzCQ0M=" />
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/elf/bundle-elf-mobile.min.css?v=Lk2wjMMUJjSLadG0Xil7JdDLDWWAvcpQmxzjUgc7cAk" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/shanzhiming/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/shanzhiming/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/shanzhiming/wlwmanifest.xml" />
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=6bwfCY2e02dLOXNW99G2BHZkYFmw9QyYTWeJ-W-sudo"></script>
    <script>
        var currentBlogId = 485477;
        var currentBlogApp = 'shanzhiming';
        var cb_enable_mathjax = false;
        var isLogined = false;
        var skinName = 'elf';
    </script>
    
    
    
</head>
<body>
    <a name="top"></a>
    <div id="page_begin_html">
        <a href="https://github.com/shanzm" class="github-corner" aria-label="View source on GitHub"><svg width="60" height="60" viewBox="0 0 250 250" style="fill:#112738bd; color:#fff; position: absolute; top: 0; border: 0; right: 0;" aria-hidden="true"><path d="M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z"></path><path d="M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2" fill="currentColor" style="transform-origin: 130px 106px;" class="octo-arm"></path><path d="M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z" fill="currentColor" class="octo-body"></path></svg></a>
<style>.github-corner:hover .octo-arm{animation:octocat-wave 560ms ease-in-out}@keyframes octocat-wave{0%,100%{transform:rotate(0)}20%,60%{transform:rotate(-25deg)}40%,80%{transform:rotate(10deg)}}@media (max-width:500px){.github-corner:hover .octo-arm{animation:none}.github-corner .octo-arm{animation:octocat-wave 560ms ease-in-out}}</style>

<!----------------------------------------------------------支持手机端显示------开始--------------------------------------->
<script>
<!-- var content = 'width=device-width, initial-scale=1 user-scalable=no';
var viewport = document.createElement('meta');
viewport.setAttribute('name', 'viewport');
viewport.setAttribute('content', content);
document.head.appendChild( viewport );-->
<!--上面那些就等下下面这语句，其实就是在head标签中添加一个meta标签
其中meta参数：参数1：设置屏幕宽度为设备宽度，参数2：缩放值为1。这样做是为了防止根据不同屏幕的像素密度对你的页面进行缩放-->
$("head").prepend("");
</script>
<!----------------------------------------------------------支持手机端显示------结束--------------------------------------->
<!----------------------------------------------------------重新自定义页面头部------开始--------------------------------------->
<div id="headerNew">
    <div id="blogTitle">
        <a id="lnkBlogLogo" href="https://www.cnblogs.com/shanzhiming/"><img id="blogLogo"
                src="/Skins/custom/images/logo.gif" alt="返回主页"></a>
        <!--done-->
        <h1><a id="Header1_HeaderTitle" class="headermaintitle" href="https://www.cnblogs.com/shanzhiming/"></a></h1>
        <h2></h2>
    </div>
    <!--end: blogTitle 博客的标题和副标题 -->
    <div id="navigator">
        <ul id="navList">
            <!-- <li><a id="blog_nav_sitehome" class="menu" href="http://www.cnblogs.com/">博客园</a></li>  -->
            <li><a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/shanzhiming/" style="font-weight:bold;font-size: 24px;color: #1eff00;text-shadow: 1px 1px 8px #fff40d;">Shanzm</a></li>
            <!--
             连接到指定的分类（当然前提是你有这个分类，找到分类下面的连接替换）
             <li><a id="blog_nav_net" href="http://www.cnblogs.com/shanzhiming/category/890024.html">网络</a></li>
             -->                       
            <li><a id="blog_nav_newpost" class="menu" rel="nofollow"
                    href="http://www.cnblogs.com/shanzhiming/p">随笔</a></li>
            <!--
            <li><a id="blog_nav_net" href="https://www.cnblogs.com/shanzhiming/category/1647166.html">转载</a></li>

 
             <li><a id="blog_nav_newpost" class="menu" rel="nofollow"
                    href="https://i1.cnblogs.com/EditDiary.aspx?opt=1">日记</a></li>
            -->

            <li><a id="blog_nav_contact" class="menu" rel="nofollow" href="https://msg.cnblogs.com/send/shanzm">联系</a>
            </li>
            <li><a id="blog_nav_rss" class="menu" href="javascript:void(0)"
                    onclick="follow('e6e2d1bf-892b-4d8e-b066-08d66f389d49')">订阅</a></li>
             <li><a id="blog_nav_admin" class="menu" rel="nofollow" href="https://i.cnblogs.com/">管理</a></li>
<!--
            <li><a id="blog_nav_net" href="https://github.com/shanzm">
                    <img src="https://images.cnblogs.com/cnblogs_com/shanzhiming/1395453/o_200225225757images.png" 
                            width="25" height="25" style="vertical-align: middle;"/>
                  </a> </li>

            <li><a id="blog_nav_net" href="https://stackoverflow.com/users/11304944/shanzm?tab=profile">
                     <img border="0" src="https://images.cnblogs.com/cnblogs_com/shanzhiming/1395453/o_200225225541apple-touch-icon@2.png"  width="36" height="36" style="vertical-align: middle;"/>
            </a></li>
  -->         
        </ul>
        <div class="blogStats">
            <span id="stats_post_count">随笔 - 0&nbsp; </span>
            <span id="stats_article_count">文章 - 0&nbsp; </span>
            <span id="stats-comment_count">评论 - 0</span>
        </div>
        <!--end: blogStats -->
    </div>
    <!--end: navigator 博客导航栏 -->
</div>

    </div>
    
<!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
        <a id="lnkBlogLogo" href="https://www.cnblogs.com/shanzhiming/"><img id="blogLogo" src="/skins/custom/images/logo.gif" alt="返回主页" /></a>		
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/shanzhiming/">Shanzm</a>
</h1>
<h2>
<a href="https://www.cnblogs.com/shanzhiming" style="font-size:12px;text-align:center;">首页</a>

<a href="https://www.cnblogs.com/shanzhiming/tag/" style="font-size:12px;text-align:center;">&nbsp;&nbsp;标签</a>

<a href="https://i-beta.cnblogs.com/" style="font-size:12px">&nbsp;&nbsp;管理</a>

<a href="https://github.com/shanzm" style="font-size:12px">&nbsp;&nbsp;GitHub</a>


</h2>




		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
<li>
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/shanzhiming/">
首页</a>
</li>
<li>

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
<li>
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/shanzm">
联系</a></li>
<li>

<!--<partial name="./Shared/_XmlLink.cshtml" model="Model" /></li>--></li>
<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>


		<div class="blogStats">
			
			<span id="stats_post_count">随笔 - 
43&nbsp; </span>
<span id="stats_article_count">文章 - 
2&nbsp; </span>
<span id="stats-comment_count">评论 - 
28</span>

			
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->

<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		
<!--done-->




		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/shanzhiming/archive/2020/05/27.html">2020年5月27日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/shanzhiming/p/12975175.html">
    存储过程——游标
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：目录 1. 游标简介 1.0 理解定义 1.1 游标的主要作用 1.2 游标的优缺点 1.3 游标生命周期 1.4 基本语法 2. 游标示例 2.0 准备测试数据 2.1 示例1-FORWARD_ONLY类型游标 2.2 示例2-SCROLL类型游标 2.3 示例3-使用游标进行更新和删除数据 20            <a href="https://www.cnblogs.com/shanzhiming/p/12975175.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2020-05-27 21:36
shanzm
<span class="post-view-count">阅读(44)</span><text> </text>
<span class="post-comment-count">评论(0)</span><text> </text>
<span class="post-digg-count">推荐(0)</span><text> </text>
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12975175" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/shanzhiming/archive/2020/05/15.html">2020年5月15日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/shanzhiming/p/12897818.html">
    存储过程——公用表表达式(CTE)
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：公用表表达式(Common Table Expression) 是SQL Server2005版本的引入的一个特性。CTE可以看组是一个临时的结果集，可以再接下来来的一个select,insert,update,delete,merge语句中多次引用。使用公用表达式CTE可以让语句更加清晰简练。            <a href="https://www.cnblogs.com/shanzhiming/p/12897818.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2020-05-15 23:10
shanzm
<span class="post-view-count">阅读(174)</span><text> </text>
<span class="post-comment-count">评论(1)</span><text> </text>
<span class="post-digg-count">推荐(0)</span><text> </text>
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12897818" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/shanzhiming/archive/2020/05/13.html">2020年5月13日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/shanzhiming/p/12870191.html">
    存储过程——异常捕获&amp;打印异常信息
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：目录 &quot;0. 背景说明&quot; &quot;1. 建立异常信息表ErrorLog&quot; &quot;2. 建立保存异常信息的存储过程&quot; &quot;3. 建立在SQL Server中打印异常信息的存储过程&quot; &quot;4. 建立一个用于测试的存储过程抛出异常进行测试&quot; &quot;5. 参考信息&quot; shanzm 2020年5月13日 0. 背景说明 之前极            <a href="https://www.cnblogs.com/shanzhiming/p/12870191.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2020-05-13 20:11
shanzm
<span class="post-view-count">阅读(246)</span><text> </text>
<span class="post-comment-count">评论(0)</span><text> </text>
<span class="post-digg-count">推荐(3)</span><text> </text>
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12870191" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/shanzhiming/archive/2020/05/03.html">2020年5月3日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/shanzhiming/p/12824650.html">
    存储过程—— C#中调用存储过程的简单示例
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：存储过程（Stored Procedure） 是在大型数据库系统中，一组为了完成特定功能的SQL 语句集，它存储在数据库中，一次编译后永久有效，用户通过指定存储过程的名字并给出参数（如果该存储过程带有参数）来执行它。            <a href="https://www.cnblogs.com/shanzhiming/p/12824650.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2020-05-03 23:25
shanzm
<span class="post-view-count">阅读(255)</span><text> </text>
<span class="post-comment-count">评论(4)</span><text> </text>
<span class="post-digg-count">推荐(1)</span><text> </text>
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12824650" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/shanzhiming/archive/2020/05/01.html">2020年5月1日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/shanzhiming/p/12815420.html">
    设计模式——抽象工厂模式
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：抽象工厂模式（Abstract Factory Pattern）：为创建一组相关或相互依赖的对象提供一个接口，而且无须指定它们的具体类。
产品族(产品系列)：同一个具体工厂创建的不同等级的产品称为同一产品族，或是称为同一产品系列。
产品等级：又称为产品系列，指的是继承与同一个抽象产品类的所有具体产品称之为同一个产品等级            <a href="https://www.cnblogs.com/shanzhiming/p/12815420.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2020-05-01 23:38
shanzm
<span class="post-view-count">阅读(197)</span><text> </text>
<span class="post-comment-count">评论(0)</span><text> </text>
<span class="post-digg-count">推荐(0)</span><text> </text>
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12815420" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/shanzhiming/archive/2020/04/08.html">2020年4月8日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/shanzhiming/p/12663493.html">
    设计模式——单例模式
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：单例模式（Singleton Pattern）：确保某一个类只有一个实例，而且自行实例化并向整个系统提供这个实例。
实现单例模式的方法：私有化构造函数，添加一个静态的字段保存类的唯一实例，并提供一个访问该实例的静态方法GetInstance()
单例模式分为两种：“懒汉式单例模式”和“饿汉式单例模式”。            <a href="https://www.cnblogs.com/shanzhiming/p/12663493.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2020-04-08 22:37
shanzm
<span class="post-view-count">阅读(293)</span><text> </text>
<span class="post-comment-count">评论(1)</span><text> </text>
<span class="post-digg-count">推荐(2)</span><text> </text>
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12663493" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/shanzhiming/archive/2020/04/03.html">2020年4月3日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/shanzhiming/p/12629387.html">
    设计模式——工厂方法模式
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：工厂方法模式（Factory Method Pattern）也称为工厂模式，又称为虚拟构造器模式或多态模式。

在工厂方法模式中，工厂父类负责定义创建产品对象的公共接口，而工厂子类则负责生成具体的产品对象，这样做的目的是将产品类的实例化操作延迟到工厂子类中完成，即通过工厂子类来确定究竟应该实例化哪一个具体产品类。            <a href="https://www.cnblogs.com/shanzhiming/p/12629387.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2020-04-03 22:30
shanzm
<span class="post-view-count">阅读(226)</span><text> </text>
<span class="post-comment-count">评论(0)</span><text> </text>
<span class="post-digg-count">推荐(1)</span><text> </text>
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12629387" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/shanzhiming/archive/2020/04/01.html">2020年4月1日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/shanzhiming/p/12616423.html">
    设计模式——简单工厂模式
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：[TOC] shanzm 2020年4月1日 22:18:49 1. 简介 简单工厂模式（Simple Factory Pattern） ：定义一个工厂类，根据不同的参数，创建并返回不同的类。其中这些类具有一个公共的父类或是一个接口。 简单工厂模式不属于GoF四人组提出的23种设计模式，它是最简单的            <a href="https://www.cnblogs.com/shanzhiming/p/12616423.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2020-04-01 22:22
shanzm
<span class="post-view-count">阅读(248)</span><text> </text>
<span class="post-comment-count">评论(1)</span><text> </text>
<span class="post-digg-count">推荐(0)</span><text> </text>
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12616423" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/shanzhiming/archive/2020/03/31.html">2020年3月31日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/shanzhiming/p/12608123.html">
    设计模式——面向对象的设计原则
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：[TOC] shanzm 2020年3月31日 20:17:27 0. UML 统一建模语言（Unified Modeling Language， UML ）是用来设计软件蓝图的可视化建模语言。 可以参考 &quot;统一建模语言&quot; 于此不详述，仅展示使用Visual Studio自动生成的类图样式 需要说明            <a href="https://www.cnblogs.com/shanzhiming/p/12608123.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2020-03-31 20:38
shanzm
<span class="post-view-count">阅读(84)</span><text> </text>
<span class="post-comment-count">评论(1)</span><text> </text>
<span class="post-digg-count">推荐(0)</span><text> </text>
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12608123" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/shanzhiming/archive/2020/03/25.html">2020年3月25日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/shanzhiming/p/12570677.html">
     关于Quartz .NET(V3.0.7)的简要说明
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：[TOC] shanzm 2020年3月25日 21:28:09 0. 任务调度 比如说，财务系统需要在每个月初生成上一个月的财务报表。 比如说，每天或每周固定时间对数据库更新。 比如说，每天定时发送邮件。 这些需要在某个 预定的时间点周期性的 执行某个特定的任务的功能（也就是任务调度），可以使用任            <a href="https://www.cnblogs.com/shanzhiming/p/12570677.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2020-03-25 21:33
shanzm
<span class="post-view-count">阅读(653)</span><text> </text>
<span class="post-comment-count">评论(0)</span><text> </text>
<span class="post-digg-count">推荐(4)</span><text> </text>
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12570677" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/shanzhiming/archive/2020/03/17.html">2020年3月17日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/shanzhiming/p/12513005.html">
    .NET实现一个简单的IOC容器
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：[TOC] shanzm 2020年3月17日 20:06:01 0.关于IOC 相关概念类知识，可以参考： &quot;.NET中的控制反转及AutoFac的简单说明&quot; 1.主要细节 使用反射程序集的方式获取对象的类型 通过反射的方式获取指定类型的的所有公共属性 通过特性的方式筛选需要注入对象的类型 递归的            <a href="https://www.cnblogs.com/shanzhiming/p/12513005.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2020-03-17 20:10
shanzm
<span class="post-view-count">阅读(627)</span><text> </text>
<span class="post-comment-count">评论(2)</span><text> </text>
<span class="post-digg-count">推荐(3)</span><text> </text>
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12513005" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/shanzhiming/archive/2020/03/16.html">2020年3月16日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/shanzhiming/p/12501543.html">
    .NET中的控制反转及AutoFac的简单说明
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：[TOC] shanzm 2020年3月16日 02:17:35 1.控制反转 1.1 什么是依赖？ 依赖 是面向对象中用来描述类与类之间一种关系的概念。两个相对独立的对象，当一个对象负责构造另一个对象的实例，或者依赖另一个对象的服务，这样的两个对象之间主要体现为 依赖关系 1.2 什么是控制反转？            <a href="https://www.cnblogs.com/shanzhiming/p/12501543.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2020-03-16 02:21
shanzm
<span class="post-view-count">阅读(469)</span><text> </text>
<span class="post-comment-count">评论(6)</span><text> </text>
<span class="post-digg-count">推荐(6)</span><text> </text>
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12501543" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/shanzhiming/archive/2020/03/07.html">2020年3月7日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/shanzhiming/p/12439214.html">
     .NET异步程序设计——async&amp;await
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：[TOC] shanzm 2020年3月7日 23:12:53 0.背景引入 现在的.net异步编程中，一般都是使用 基于任务异步模式 (Task based Asynchronous Pattern，TAP)实现异步编程 可参考 &quot;微软文档：使用基于任务的异步模式&quot; 基于任务的异步模式，是使用 命            <a href="https://www.cnblogs.com/shanzhiming/p/12439214.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2020-03-07 23:23
shanzm
<span class="post-view-count">阅读(521)</span><text> </text>
<span class="post-comment-count">评论(2)</span><text> </text>
<span class="post-digg-count">推荐(6)</span><text> </text>
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12439214" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/shanzhiming/archive/2020/02/16.html">2020年2月16日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/shanzhiming/p/12315548.html">
     .NET异步程序设计——任务并行库
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：[TOC] shanzm 2020年2月16日 00:45:04 1.简介 中的类型被称为 任务并行库 （Task Parallel Library， TPL ）。 命名空间是.NET Framework4.0所提供， “TPL使用CLR线程池自动将应用程序的工作动态分配到可用的CPU中。TPL还处            <a href="https://www.cnblogs.com/shanzhiming/p/12315548.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2020-02-16 01:01
shanzm
<span class="post-view-count">阅读(783)</span><text> </text>
<span class="post-comment-count">评论(1)</span><text> </text>
<span class="post-digg-count">推荐(12)</span><text> </text>
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12315548" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/shanzhiming/archive/2020/02/11.html">2020年2月11日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/shanzhiming/p/12296283.html">
     .NET异步程序设计——异步委托
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：[TOC] shanzm 2020年2月11日 18:55:50 1.AMP模式简介 在.net1.x的版本中就可以使用 实现异步操作，但是比较复杂，这种称之为 异步编程模型模式 (Asynchronous Programming Model, APM)，也称为 IAsyncResult模式 这种A            <a href="https://www.cnblogs.com/shanzhiming/p/12296283.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2020-02-11 19:01
shanzm
<span class="post-view-count">阅读(142)</span><text> </text>
<span class="post-comment-count">评论(0)</span><text> </text>
<span class="post-digg-count">推荐(0)</span><text> </text>
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12296283" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/shanzhiming/archive/2020/02/10.html">2020年2月10日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/shanzhiming/p/12292710.html">
    .NET异步程序设计——概念引入
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：[TOC] shanzm 2020 02 10 20:56 0.为什么要异步编程 “有些程序操作会花费较长时间。设想一下这样的几种情况：一个单线程程序调用一个远程对象的方法，或是调用一个执行耗时数据库查询的方法，或是下载一个大文档，或是向一个外部文件写500行的文字。在执行这些操作时，应用程序会显得            <a href="https://www.cnblogs.com/shanzhiming/p/12292710.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2020-02-10 20:56
shanzm
<span class="post-view-count">阅读(43)</span><text> </text>
<span class="post-comment-count">评论(0)</span><text> </text>
<span class="post-digg-count">推荐(0)</span><text> </text>
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12292710" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/shanzhiming/archive/2020/02/08.html">2020年2月8日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/shanzhiming/p/12275431.html">
    关于《精通C#(第6版)》与《C#5.0图解教程》中的一点矛盾的地方
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：志铭 2020年2月8日 03:32:03 这几天无聊看书，《精通C 》和《C 图解教程》，几本书对比者看，都是旧版本的书，发现两本书中的一个矛盾的地方： 《精通C (第6版)》P571：说明：“如果异步调用一个无返回值的方法，仅仅调用BeginInvoke()就可以了。在这种情况下，我们不需要缓存            <a href="https://www.cnblogs.com/shanzhiming/p/12275431.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2020-02-08 04:07
shanzm
<span class="post-view-count">阅读(182)</span><text> </text>
<span class="post-comment-count">评论(1)</span><text> </text>
<span class="post-digg-count">推荐(1)</span><text> </text>
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12275431" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/shanzhiming/archive/2020/01/23.html">2020年1月23日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/shanzhiming/p/12230417.html">
    关于C#程序的单元测试
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：[TOC] 志铭 2020年1月23日 11:49:41 1.单元测试概念 什么是单元测试？ 单元测试（unit testing）是一段自动化的代码，用来调用被测试的方法或类，而后验证基于该方法或类的逻辑行为的一些假设。 简而言之说：单元测试是一段代码（通常一个方法）调用另外一段代码，随后检验一些假            <a href="https://www.cnblogs.com/shanzhiming/p/12230417.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2020-01-23 11:57
shanzm
<span class="post-view-count">阅读(787)</span><text> </text>
<span class="post-comment-count">评论(4)</span><text> </text>
<span class="post-digg-count">推荐(5)</span><text> </text>
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12230417" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/shanzhiming/archive/2020/01/17.html">2020年1月17日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/shanzhiming/p/12207896.html">
    关于Log4Net的使用及配置方式
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：[TOC] 志铭 2020年1月17日 23:18:37 0.简介 Log4Net库是Apache log4j框架在 .NET平台下的实现，其开源免费。它可以将日志分不同的等级，以不同的格式，输出到不同的媒介。 官网地址：http://logging.apache.org/log4net/index            <a href="https://www.cnblogs.com/shanzhiming/p/12207896.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2020-01-17 23:33
shanzm
<span class="post-view-count">阅读(704)</span><text> </text>
<span class="post-comment-count">评论(1)</span><text> </text>
<span class="post-digg-count">推荐(6)</span><text> </text>
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12207896" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/shanzhiming/archive/2020/01/10.html">2020年1月10日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/shanzhiming/p/12175031.html">
     基于.net ,使用几种常见的NoSQL数据库
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：[toc] &quot;示例完整源码地址&quot; shanzm 2020年1月10日 10:10:10本文只是我的一个Github仓库的自述文件，详细的各个NoSQL的驱动API可查看 &quot;仓库&quot; 中的代码 0 .net中的缓存对象 因为需要向服务器多次请求相同的数据，为了减轻服务器压力，所以引入缓存。 在.net中            <a href="https://www.cnblogs.com/shanzhiming/p/12175031.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2020-01-10 10:49
shanzm
<span class="post-view-count">阅读(453)</span><text> </text>
<span class="post-comment-count">评论(2)</span><text> </text>
<span class="post-digg-count">推荐(1)</span><text> </text>
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12175031" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/shanzhiming/archive/2019/08/23.html">2019年8月23日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/shanzhiming/p/11402803.html">
    关于C#中的“？”
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：[TOC] shanzm 2019年8月23日 19:59:46 1. 可空类型修饰符（T?） 强类型语言中引用类型可以为空，如： 而你若是定义一个值类型为空，则是会报错的。 然而，在处理数据库和其他包含可能未赋值的元素的数据类型时，我们希望可以将 null 赋值给数值类型或布尔型的功能特别有用。例            <a href="https://www.cnblogs.com/shanzhiming/p/11402803.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2019-08-23 21:40
shanzm
<span class="post-view-count">阅读(245)</span><text> </text>
<span class="post-comment-count">评论(0)</span><text> </text>
<span class="post-digg-count">推荐(1)</span><text> </text>
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=11402803" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/shanzhiming/archive/2019/08/09.html">2019年8月9日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/shanzhiming/p/11324811.html">
    Cases：Unit Testing with the MSTest  Framework
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：UnitTesting shanzm 右键 在新标签页中打开图片，即可查看原图，图片超乎你想像的大！ 源代码：https://github.com/shanzm/UnitTesting            <a href="https://www.cnblogs.com/shanzhiming/p/11324811.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2019-08-09 01:58
shanzm
<span class="post-view-count">阅读(90)</span><text> </text>
<span class="post-comment-count">评论(0)</span><text> </text>
<span class="post-digg-count">推荐(0)</span><text> </text>
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=11324811" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
            <div class="postSeparator"></div>
        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/shanzhiming/p/11324795.html">
    Notes:Unit Testing
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：UnitTesting shanzm 右键 在新标签页中打开图片，即可查看原图，图片超乎你想像的大！            <a href="https://www.cnblogs.com/shanzhiming/p/11324795.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2019-08-09 01:37
shanzm
<span class="post-view-count">阅读(54)</span><text> </text>
<span class="post-comment-count">评论(0)</span><text> </text>
<span class="post-digg-count">推荐(0)</span><text> </text>
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=11324795" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/shanzhiming/archive/2019/08/04.html">2019年8月4日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/shanzhiming/p/11300319.html">
    Review: Basic Knowledge about WebForm
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：Asp.net shanzm            <a href="https://www.cnblogs.com/shanzhiming/p/11300319.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2019-08-04 22:46
shanzm
<span class="post-view-count">阅读(103)</span><text> </text>
<span class="post-comment-count">评论(0)</span><text> </text>
<span class="post-digg-count">推荐(0)</span><text> </text>
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=11300319" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/shanzhiming/archive/2019/04/29.html">2019年4月29日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/shanzhiming/p/10791053.html">
    关于正则表达式
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：[TOC] shanzm 2019年5月1日 00:07:35 1.简介 1.1 概念 正则表达式 ：使用单个字符串来描述、匹配一系列符合某个句法规则的字符串。这个实际的正则表达式，也称为：模式（pattern) 1.2 具体用处 【查找】：一些软件中自带的搜索功能，是支持正则表达式的，可以实现有目            <a href="https://www.cnblogs.com/shanzhiming/p/10791053.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2019-04-29 16:17
shanzm
<span class="post-view-count">阅读(317)</span><text> </text>
<span class="post-comment-count">评论(0)</span><text> </text>
<span class="post-digg-count">推荐(0)</span><text> </text>
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=10791053" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/shanzhiming/archive/2019/04/08.html">2019年4月8日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/shanzhiming/p/10668276.html">
    关于插件Markdown Preview Enhanced的使用技巧
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：目录： &quot;1.关于TOC&quot; &quot;2.关于转义符&quot; &quot;3.绘图&quot; &quot;3.0 绘图配色主题&quot; &quot;3.1 Flowchart（流程图）&quot; &quot;3.2 Sequence diagram(顺序图)&quot; &quot;4 保存为HTML&quot; shanzm 1.关于TOC Github不支持TOC，所以我们要自己写目录再给目录加连接            <a href="https://www.cnblogs.com/shanzhiming/p/10668276.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2019-04-08 00:53
shanzm
<span class="post-view-count">阅读(314)</span><text> </text>
<span class="post-comment-count">评论(0)</span><text> </text>
<span class="post-digg-count">推荐(0)</span><text> </text>
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=10668276" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/shanzhiming/archive/2019/03/21.html">2019年3月21日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/shanzhiming/p/10574765.html">
    Review: Command-line about Git
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：Git shanzm            <a href="https://www.cnblogs.com/shanzhiming/p/10574765.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2019-03-21 21:27
shanzm
<span class="post-view-count">阅读(70)</span><text> </text>
<span class="post-comment-count">评论(0)</span><text> </text>
<span class="post-digg-count">推荐(0)</span><text> </text>
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=10574765" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/shanzhiming/archive/2019/03/18.html">2019年3月18日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/shanzhiming/p/10554435.html">
    Review: Basic Knowledge about JavaScript 1
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：JavaScript shanzm            <a href="https://www.cnblogs.com/shanzhiming/p/10554435.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2019-03-18 19:56
shanzm
<span class="post-view-count">阅读(76)</span><text> </text>
<span class="post-comment-count">评论(0)</span><text> </text>
<span class="post-digg-count">推荐(0)</span><text> </text>
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=10554435" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/shanzhiming/archive/2019/03/06.html">2019年3月6日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/shanzhiming/p/10403520.html">
    《SQL CookBook 》笔记-第三章-多表查询
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：第三章 shanzm [TOC] 注：笔记中的SQL语句只在SQL Server2014上测试过，不一定适应其他的DBMS，SQL server默认输出结果是网格格式，在此之后改为文本格式。 3.1 叠加两个行集 问题： 你想返回保存在多个表中的数据 解决方案： 联合查询 ，使用 合并多个表中的行             <a href="https://www.cnblogs.com/shanzhiming/p/10403520.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2019-03-06 02:26
shanzm
<span class="post-view-count">阅读(193)</span><text> </text>
<span class="post-comment-count">评论(0)</span><text> </text>
<span class="post-digg-count">推荐(0)</span><text> </text>
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=10403520" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/shanzhiming/archive/2019/02/16.html">2019年2月16日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/shanzhiming/p/10389561.html">
    《SQL CookBook 》笔记-第三章-多表查询-连接查询
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：[toc] shanzm 1 内连接（inner join） 内连接又称为 等值连接 (equal join),他是基于两个表之间的某列相等来做连接。 内连接有隐式的连接和显式的连接，二者是一样的，只不过写法不一样。 1.1 隐式的内连接 使用 子句 结果： 1.2 显式的内连接 显示的内连接使用             <a href="https://www.cnblogs.com/shanzhiming/p/10389561.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2019-02-16 22:29
shanzm
<span class="post-view-count">阅读(75)</span><text> </text>
<span class="post-comment-count">评论(0)</span><text> </text>
<span class="post-digg-count">推荐(0)</span><text> </text>
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=10389561" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/shanzhiming/archive/2019/02/13.html">2019年2月13日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/shanzhiming/p/10371418.html">
    C#-反射reflection
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：C shanzm [TOC] 简介 反射（reflection)是什么？ 在《精通C 》中是这么说的“反射就是一个运行库发现的过程”。 举例来说，通过反射，可以得到一个给定的 .dll或 .exe程序集所包含的所有类型的列表，这个列表包括给定类型定义的方法、字段、属性和事件。 引入 1.新建类库 右            <a href="https://www.cnblogs.com/shanzhiming/p/10371418.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2019-02-13 18:49
shanzm
<span class="post-view-count">阅读(91)</span><text> </text>
<span class="post-comment-count">评论(0)</span><text> </text>
<span class="post-digg-count">推荐(0)</span><text> </text>
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=10371418" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/shanzhiming/archive/2019/02/11.html">2019年2月11日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/shanzhiming/p/10358502.html">
    《SQL CookBook 》笔记-第二章-查询结果排序
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：第二章 shanzm [TOC] 2.1 以指定顺序返回查询结果 问题： 你想显示部门编号为 10 的员工的名字、职位和工资，并根据工资从低到高排序。 解决方案： 使用 代码如下： 当然你可以使用多字段排序 比如先按照sal升序排序，然自后按照入职日期降序排列 【注意】 1. 默认是升序，即 2.             <a href="https://www.cnblogs.com/shanzhiming/p/10358502.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2019-02-11 14:56
shanzm
<span class="post-view-count">阅读(167)</span><text> </text>
<span class="post-comment-count">评论(0)</span><text> </text>
<span class="post-digg-count">推荐(0)</span><text> </text>
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=10358502" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/shanzhiming/archive/2019/02/09.html">2019年2月9日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/shanzhiming/p/10357783.html">
    《SQL CookBook 》笔记-第一章-检索记录
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：第一章 shanzm [TOC] 1.1检索所有行和列 问题：你有一张表，并且想查看表中的所有数据。 解决方案1： 解决方案2： 说明： 建议使用方案2，因为别人看你的代码的时候不一定知道你查询的表里面的列，所以还是写出查询的具体列更方便阅读。其次从优化的角度来说，尽量避免“ select ” 的存            <a href="https://www.cnblogs.com/shanzhiming/p/10357783.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2019-02-09 18:22
shanzm
<span class="post-view-count">阅读(454)</span><text> </text>
<span class="post-comment-count">评论(0)</span><text> </text>
<span class="post-digg-count">推荐(1)</span><text> </text>
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=10357783" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/shanzhiming/archive/2019/02/08.html">2019年2月8日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/shanzhiming/p/10355785.html">
    Git飞行规则(Flight Rules)
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
该文被密码保护。    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2019-02-08 00:27
shanzm
<span class="post-view-count">阅读(6)</span><text> </text>
<span class="post-comment-count">评论(0)</span><text> </text>
<span class="post-digg-count">推荐(0)</span><text> </text>
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=10355785" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/shanzhiming/archive/2019/02/07.html">2019年2月7日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/shanzhiming/p/10355743.html">
    【转载】Review: Basic Knowledge about SQL
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：&quot; 转自Github：enochtangg/quick SQL cheatsheet &quot; 目录 1. &quot; 查找数据的查询 &quot; 2. &quot; 修改数据的查询 &quot; 3. &quot; 聚合查询 &quot; 4. &quot; 连接查询 &quot; 5. &quot; 视图查询 &quot; 6. &quot; 修改表的查询 &quot; 1. 查找数据的查询 1.1 SELECT             <a href="https://www.cnblogs.com/shanzhiming/p/10355743.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2019-02-07 23:35
shanzm
<span class="post-view-count">阅读(204)</span><text> </text>
<span class="post-comment-count">评论(0)</span><text> </text>
<span class="post-digg-count">推荐(0)</span><text> </text>
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=10355743" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
            <div class="postSeparator"></div>
        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/shanzhiming/p/10354873.html">
    使用VsCode自带的Emmet语法
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：shanzm 2019 02 07 15:48 1. 新建html文件，保存之后，输入“ ”，按Tap(或Enter）键，自动生成HTML结构 2. 标签只要直接输入标签名（不要输入），按Tap(或Enter）键自动生成完整的标签 3. 输入标签和id:标签名 id名 输入“ &quot;,Tap(或Ente            <a href="https://www.cnblogs.com/shanzhiming/p/10354873.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2019-02-07 15:48
shanzm
<span class="post-view-count">阅读(3869)</span><text> </text>
<span class="post-comment-count">评论(0)</span><text> </text>
<span class="post-digg-count">推荐(0)</span><text> </text>
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=10354873" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/shanzhiming/archive/2019/02/05.html">2019年2月5日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/shanzhiming/p/10352818.html">
    《SQL CookBook 》笔记-准备工作
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：[TOC] 第二章 shanzm 1.建立员工表——EMP 字段说明： |EMP(员工表)字段|说明| | | | EMPNO|工号 ENAME|姓名 JOB|工种 MGR|上级编号 HIREDATE|雇佣日期 SAL|工资 COMM|奖金 DEPTNO|部门编号 2.建立部门表——DEPT 字段说            <a href="https://www.cnblogs.com/shanzhiming/p/10352818.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2019-02-05 16:05
shanzm
<span class="post-view-count">阅读(240)</span><text> </text>
<span class="post-comment-count">评论(0)</span><text> </text>
<span class="post-digg-count">推荐(0)</span><text> </text>
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=10352818" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/shanzhiming/archive/2019/02/03.html">2019年2月3日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/shanzhiming/p/10349512.html">
    C#-this关键字的功能之扩展方法
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：[TOC] shanzm 2019 02 03 00:35 1. 简介 我们的方法都是与声明他的类的相关联（我们现在写的各个方法都是在类中定义，所以我们调用方法都是用该方法所属类的实体对象调用）。 在C 3.0中的 扩展方法 的特征，允许声明的 方法 与 不是声明该方法的类 相关联。 2. 简单实例            <a href="https://www.cnblogs.com/shanzhiming/p/10349512.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2019-02-03 00:35
shanzm
<span class="post-view-count">阅读(313)</span><text> </text>
<span class="post-comment-count">评论(0)</span><text> </text>
<span class="post-digg-count">推荐(0)</span><text> </text>
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=10349512" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/shanzhiming/archive/2019/01/31.html">2019年1月31日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/shanzhiming/p/10342139.html">
    C#-事件event
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：[TOC] 1. 简介 1. 事件是一种类型安全的委托（具体实例说明见《精通C 》 10.5 C 事件） 为什么这么说呢？可以类比属性和字段，属性是对字段的封装，其实 事件也就是封装了一个委托。 但是你要知道：委托是一种自定义的数据类型，事件只是一种类的成员。 2. 那么现在你要问：事件到底有什么具            <a href="https://www.cnblogs.com/shanzhiming/p/10342139.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2019-01-31 15:24
shanzm
<span class="post-view-count">阅读(2218)</span><text> </text>
<span class="post-comment-count">评论(1)</span><text> </text>
<span class="post-digg-count">推荐(2)</span><text> </text>
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=10342139" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/shanzhiming/archive/2019/01/29.html">2019年1月29日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/shanzhiming/p/10332381.html">
    C#-委托delegate
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：[TOC] shanzm 2019 01 29 01:15 1.委托的定义 【定义】：委托是C 中函数回调机制，就是c语言中的函数指针在面向对象中的封装；简而言之就是函数指针。 它定义了方法的类型，使得可以将方法当作另一个方法的参数来进行传递。 委托和类相似，都是用户自定义的一种类型，只不过类表示的            <a href="https://www.cnblogs.com/shanzhiming/p/10332381.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2019-01-29 01:15
shanzm
<span class="post-view-count">阅读(597)</span><text> </text>
<span class="post-comment-count">评论(0)</span><text> </text>
<span class="post-digg-count">推荐(0)</span><text> </text>
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=10332381" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>



<div class="topicListFooter">
    <div id="nav_next_page">
        
    <a href="https://www.cnblogs.com/shanzhiming/default.html?page=2">
        下一页
    </a>

    </div>    
</div>








	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			
<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>

<div id="sidebar_ad"></div>
			<div id="blog-calendar" style="display:none"></div><script>loadBlogDefaultCalendar();</script>
			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
			</div>
			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		<!--done-->
Copyright &copy; 2020 shanzm
<br /><span id="poweredby">Powered by .NET Core on Kubernetes</span>



	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


    <div id="page_end_html">
        <a name="top"></a>
<span id="back-to-top"  style="float:right;color: #AD5D0F;font-size: 15px;font-weight:bold;" ><a href="#top">TOP</a></span>

<!----------------------------------------------------------重新自定义页面尾部------开始-------已注释了-------------------------------->
<!--
<div id="my_footer">
版权所有 © 2019 <a href="https://www.cnblogs.com/shanzhiming/" style="color:#FFFFFF;">shanzm</a>  感谢<a href="https://i.cnblogs.com/" style="color:#FFFFFF;">博客园</a>提供的平台
<br>
如果没有特别注明，本博客中的博文使用 <a href="https://creativecommons.org/licenses/by/4.0/deed.zh" style="color:#FFFFFF;">CC-BY-4.0</a> 许可证
</div>
若是使用这个页脚则把下面的css放到上面
#my_footer {
    background: #04040433;
    text-align: center;
    margin: 50px 0 0 0;
    padding: 20px;
    height: 50px;
    color: #EEE;
    border-top: 2px solid #e8e8e8;
    border-bottom: 20px solid #000;
}
-->
    </div>
</body>
</html>